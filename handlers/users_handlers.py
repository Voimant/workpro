from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from create_bot import bot
from keyboards import markup, markup2, markup3, markup4, markup5, markup6, test_markup
from pprint import pprint
from sourse.get_1C import get_request_1C
from sourse.get_crm import car_for_testdrive, create_work_list, create_lead
from sourse.get_func import get_test_re
from media.texts.texts import contacts, start_t, otziv
import re
from DB.db_main import add_client, list_id, all_id_csv
pattern = r"(8|\+7)?\s*[\(]?(\d{3})[\)-]?\s*(\d{3})[-\s]*(\d{2})[-\s]*(\d{2})\s*[\(]?(\w+\.)?\s*(\d+)?[\)]?"
class Fsm(StatesGroup):
    gos_namber = State()
    vin = State()
    
    
class Fsm1(StatesGroup):
    message_all = State()
    image_al = State()
    resl = State()

class Fsm_test(StatesGroup):
    car = State()
    name = State()
    phone = State()



#–•–µ–Ω–¥–ª–µ—Ä—ã
#@dp.message_handler(commands=['start1'])
async def cmd_start(message: types.Message):
    add_client(message.chat.id)
    logo = 'media\\images\\main_theme.jpg'
    with open(logo, 'rb') as f:
        await bot.send_photo(message.chat.id, f, start_t,  reply_markup=markup)
    print(message.chat.id)




# –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É
#@dp.callback_query_handler(text='button1')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, '–∫–Ω–æ–ø–∫–∞ –∫–ª–∞—Ü–Ω—É—Ç–∞ :)', reply_markup=markup)

#@dp.message_handler(commands=['req'])
async def in_url(message: types.Message):
    await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup)


#–§—É–Ω–∫—Ü–∏—è –º–æ–π id
#@dp.callback_query_handler(text='user_id')
async def user_id_inline_callback(call):
    print(call.from_user.id)
    print(call)
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_message(call.from_user.id, f"–í–∞—à ID: {call.from_user.id}", reply_markup=markup)

#@dp.message_handler(commands=['start'])
async def hello_handler(call):
    await bot.send_message(call.from_user.id, '–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ê–≤—Ç–æ—Å–∞–ª–æ–Ω –≠–•–û', reply_markup=markup)





#@dp.callback_query_handler(text='status')
async def auto_rep(call):
    await bot.send_message(call.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è')
    await Fsm.gos_namber.set()

#@dp.message_handler(state=Fsm.gos_namber)
async def gos_namber(message: types.Message, state: FSMContext):
    await state.update_data(gos_namber=message.text)
    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
    await Fsm.vin.set()

#@dp.message_handler(state=Fsm.vin)
async def vin(message: types.Message, state: FSMContext):
    text_1 = message.text
    subt = r"+7 (\2) \3\4\5\6\7"
    result = re.sub(pattern, subt, text_1)
    print(result)
    await state.update_data(vin=result)

    data = await state.get_data(state)
    x = get_request_1C(data['gos_namber'], data['vin'])
    x.pop('RequestStatus')
    pprint(x)
    try:
        for v in x.values():
            nakl = v['–î–∞–Ω–Ω—ã–µ–î–æ–∫—É–º–µ–Ω—Ç–∞']
            status = v['–°—Ç–∞—Ç—É—Å–†–µ–º–æ–Ω—Ç–∞']
            mess = f'''{nakl}
            –°—Ç–∞—Ç—É—Å —Ä–µ–º–æ–Ω—Ç–∞: {status}'''
            await bot.send_message(message.chat.id, mess)
    except TypeError:
        await bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—åüòî, –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è', reply_markup=markup)

    print(data)

    await state.finish()

async def contact(call):
    await bot.send_message(call.from_user.id, contacts, reply_markup=markup5)


async def review(call):
    await bot.send_message(call.from_user.id, otziv, reply_markup=markup3)

async def main_menu(call):
    logo = 'media//images//main_theme.jpg'
    with open(logo, 'rb') as f:
        await bot.send_photo(call.from_user.id, f, start_t,  reply_markup=markup)

async def serves(call):
    await bot.send_message(call.from_user.id, '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —Å–µ—Ä–≤–∏—Å–Ω–æ–º—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é', reply_markup=markup6)



"""********************–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨******************************"""
#@dp.message_handler(commands=['admin'])
async def admin(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:',)

#@dp.message_handler()
async def ad_key(message: types.Message):
    if message.text == 'jljbsdf.gsdfbge;sdj;nfafgad;jhnjsdgdjshn;jn':
        await message.answer('–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞', reply_markup=markup2)
    elif message.text == "–ö–æ–Ω—Ç–∞–∫—Ç—ã":
        url = 'https://nb-bot.ru/#o_rasrabotchike'
        pprint(get_test_re(url))

async def mess_all(call):
    await bot.send_message(call.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏')
    await Fsm1.message_all.set()

async def image_all(message: types.Message, state: FSMContext):
    await state.update_data(message_all=message.text)
    await bot.send_message(message.chat.id, '–î–æ–±–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')
    await Fsm1.image_al.set()

async def res(message: types.Message, state: FSMContext):
    photos = message.photo[-1].file_id
    await state.update_data(image_al=photos)
    data = await state.get_data(state)

    await bot.send_photo(message.chat.id, photo=data['image_al'], caption=data['message_all'])
    # await bot.send_message(message.chat.id, data['message_all'])
    await bot.send_message(message.chat.id, '–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å', reply_markup=markup4)
    await Fsm1.resl.set()

async def sends_all(callback: types.CallbackQuery, state:FSMContext):
    if callback.data == 'send':
        data = await state.get_data(state)
        for user_ids in list_id():
            print(f'{data["image_al"]} –∏ {data["message_all"]}')
            await bot.send_photo(user_ids, photo=data['image_al'], caption=data['message_all'])
            # await bot.send_message(user_ids, data['message_all'])
        await state.finish()
    elif callback.data == 'cancel':
        await bot.send_photo(callback.from_user.id, '–≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup)
        await state.finish()

async def upload_csv(call):
    x = all_id_csv()
    doc = open('clients.csv', 'rb')
    await bot.send_document(call.from_user.id, doc)
    await bot.send_message(call.from_user.id, '—Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', reply_markup=markup)

async def testdrive(call):
    await bot.send_message(call.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ –º–∞—à–∏–Ω—É     ', reply_markup=test_markup())
    await Fsm_test.car.set()

async def name_1(callback: types.CallbackQuery, state:FSMContext):
    print(callback.data)
    await bot.send_message(callback.from_user.id, callback.data)
    await state.update_data(car=callback.data)
    await bot.send_message(callback.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')
    await Fsm_test.name.set()

async def phone_1(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ 89921111222')
    await Fsm_test.phone.set()

async def all_info(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    data = await state.get_data(state)
    cars = car_for_testdrive()
    for car in cars:
        for key, value in car.items():
            if key == data['car']:
                # create_work_list(value['brand_id'], value['model_id'])
                resp = create_lead(data['name'], data['phone'], value['brand_id'], value['model_id'])
                if resp['success'] == False:
                    await bot.send_message(message.chat.id, '–ù–æ–º–µ—Ä –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', reply_markup=markup)
                else:
                    await bot.send_message(message.chat.id, '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—É—á–∏–ª –∑–∞—è–≤–∫—É –Ω–∞ —Ç–µ—Å—Ç-–¥—Ä–∞–π–≤, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—å—Å—è. –°–ø–∞—Å–∏–±–æ!', reply_markup=markup)
                    break
            else:
                pass
    await state.finish()
    print(data)


def register_handlers(dp: Dispatcher):
    """*****************************testdrive************************************"""
    dp.register_callback_query_handler(testdrive, text='button1')
    dp.register_callback_query_handler(name_1, state=Fsm_test.car)
    dp.register_message_handler(phone_1, state=Fsm_test.name)
    dp.register_message_handler(all_info, state=Fsm_test.phone)

    """**************************ADMIN**********************************"""

    dp.register_callback_query_handler(upload_csv,text='upload')
    dp.register_message_handler(admin, commands=['admin'])
    dp.register_callback_query_handler(mess_all, text='from_base')
    dp.register_message_handler(image_all, state=Fsm1.message_all)
    dp.register_message_handler(res, content_types=['photo'], state=Fsm1.image_al)
    dp.register_callback_query_handler(sends_all, state=Fsm1.resl)
    """**************************USER*********************************"""
    dp.register_callback_query_handler(serves, text='serves')
    dp.register_message_handler(cmd_start, commands=['start'])
    dp.register_callback_query_handler(auto_rep, text='status')
    dp.register_message_handler(gos_namber, state=Fsm.gos_namber)
    dp.register_message_handler(vin, state=Fsm.vin)
    dp.register_callback_query_handler(contact, text='contacts')
    dp.register_message_handler(ad_key)
    dp.register_callback_query_handler(review, text='review')
    dp.register_callback_query_handler(main_menu, text='main_menu')
